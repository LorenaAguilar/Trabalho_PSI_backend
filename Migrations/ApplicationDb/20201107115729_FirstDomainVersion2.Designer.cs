// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SSG_API.Data;

namespace SSG_API.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201107115729_FirstDomainVersion2")]
    partial class FirstDomainVersion2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SSG_API.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<double>("Avaliacao")
                        .HasColumnType("float");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Endereco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkFoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NomeCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("SSG_API.Domain.Contratante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contratante");
                });

            modelBuilder.Entity("SSG_API.Domain.LocaisDeAtendimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PrestadorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PrestadorId");

                    b.ToTable("LocaisDeAtendimento");
                });

            modelBuilder.Entity("SSG_API.Domain.OrdemDeServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContratanteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataPrestacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormaPagamento")
                        .HasColumnType("int");

                    b.Property<double>("Preco")
                        .HasColumnType("float");

                    b.Property<Guid?>("PrestadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Resumo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServicoPrestadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContratanteId");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("ServicoPrestadoId");

                    b.ToTable("OrdemDeServico");
                });

            modelBuilder.Entity("SSG_API.Domain.Prestador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biografia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Prestador");
                });

            modelBuilder.Entity("SSG_API.Domain.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescricaoServico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasFilter("[Nome] IS NOT NULL");

                    b.ToTable("Servico");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc75c5ef-3bde-4e19-8b4c-8ebfee00d020"),
                            DescricaoServico = "Ótimo pintor, especialista em desenhos e pinturas artísticas.",
                            Nome = "PINTOR"
                        },
                        new
                        {
                            Id = new Guid("5e6d40a2-233f-4c61-9af3-1ebfce5ecca6"),
                            DescricaoServico = "Especialista em encanamentos e no conserto de vazamentos em geral..",
                            Nome = "ENCANADOR"
                        });
                });

            modelBuilder.Entity("SSG_API.Domain.ServicoPrestado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Preco")
                        .HasColumnType("float");

                    b.Property<Guid?>("PrestadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UnidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("ServicoId");

                    b.HasIndex("UnidadeId");

                    b.ToTable("ServicoPrestado");
                });

            modelBuilder.Entity("SSG_API.Domain.UnidadeDeCobranca", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unidade")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Unidade")
                        .IsUnique()
                        .HasFilter("[Unidade] IS NOT NULL");

                    b.ToTable("UnidadedeCobranca");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ac1b709-d89b-4e95-b915-f2975764e9e5"),
                            Unidade = "Unidade"
                        },
                        new
                        {
                            Id = new Guid("35f56926-0350-49db-bd6e-51258322b7ae"),
                            Unidade = "Dia"
                        },
                        new
                        {
                            Id = new Guid("5f29a020-1b9e-4cc5-9e08-f0eba64dec7b"),
                            Unidade = "Hora"
                        });
                });

            modelBuilder.Entity("SSG_API.Domain.Contratante", b =>
                {
                    b.HasOne("SSG_API.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SSG_API.Domain.LocaisDeAtendimento", b =>
                {
                    b.HasOne("SSG_API.Domain.Prestador", "Prestador")
                        .WithMany()
                        .HasForeignKey("PrestadorId");
                });

            modelBuilder.Entity("SSG_API.Domain.OrdemDeServico", b =>
                {
                    b.HasOne("SSG_API.Domain.Contratante", "Contratante")
                        .WithMany()
                        .HasForeignKey("ContratanteId");

                    b.HasOne("SSG_API.Domain.Prestador", "Prestador")
                        .WithMany()
                        .HasForeignKey("PrestadorId");

                    b.HasOne("SSG_API.Domain.ServicoPrestado", "ServicoPrestado")
                        .WithMany()
                        .HasForeignKey("ServicoPrestadoId");
                });

            modelBuilder.Entity("SSG_API.Domain.Prestador", b =>
                {
                    b.HasOne("SSG_API.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SSG_API.Domain.ServicoPrestado", b =>
                {
                    b.HasOne("SSG_API.Domain.Prestador", "Prestador")
                        .WithMany()
                        .HasForeignKey("PrestadorId");

                    b.HasOne("SSG_API.Domain.Servico", "Servico")
                        .WithMany()
                        .HasForeignKey("ServicoId");

                    b.HasOne("SSG_API.Domain.UnidadeDeCobranca", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeId");
                });
#pragma warning restore 612, 618
        }
    }
}
